1)
Executamos o script com o comando "bash ex1.sh 1 2 3"
O comando imprimiu:
"
/usr/local/cuda-12.1/bin:/home/daniel/miniconda3/bin:/home/daniel/miniconda3/condabin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files/Eclipse Adoptium/jdk-8.0.362.9-hotspot/bin:/mnt/c/Program Files (x86)/Common Files/Oracle/Java/javapath:/mnt/c/Program Files/Oculus/Support/oculus-runtime:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0:/mnt/c/Windows/System32/OpenSSH:/mnt/c/Program Files (x86)/NVIDIA Corporation/PhysX/Common:/mnt/c/Program Files/Git/cmd:/mnt/c/Program Files (x86)/Microsoft SQL Server/150/DTS/Binn:/mnt/c/Program Files/Azure Data Studio/bin:/mnt/c/Program Files (x86)/FFAIO/bin:/mnt/c/WINDOWS/system32:/mnt/c/WINDOWS:/mnt/c/WINDOWS/System32/Wbem:/mnt/c/WINDOWS/System32/WindowsPowerShell/v1.0:/mnt/c/WINDOWS/System32/OpenSSH:/mnt/c/Program Files/Docker/Docker/resources/bin:/mnt/c/ProgramData/DockerDesktop/version-bin:/mnt/c/Program Files/Amazon/AWSCLIV2:/mnt/c/Program Files/Amazon/SessionManagerPlugin/bin:/mnt/c/Program Files/dotnet:/mnt/c/Program Files/Calibre2:/mnt/c/Program Files (x86)/PDFtk/bin:/mnt/c/Users/danid/Downloads/apache-maven-3.9.1-bin.tar/apache-maven-3.9.1/bin:/mnt/c/Users/danid/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/danid/AppData/Local/Programs/Microsoft VS Code/bin:/mnt/c/Users/danid/teleport-v10.3.1-windows-amd64-bin/teleport:/mnt/c/Users/danid/AppData/Roaming/Amazon:/snap/bin
daniel /home/daniel
 Joao

 Joao
msg
Escreva qualquer coisa
"

e aguardou nós escrevermos algo no terminal.
Escrevemos "qualquer coisa", e o programa imprimiu:
"
Escreveu qualquer coisa
Wed Jun 28 13:37:50 -03 2023
/home/daniel estamos em /mnt/c/Users/danid/Desktop/so2-20231/trab4
x=6
x=9
x=8
Numero de argumentos para este script 3
Numero de argumentos para este script 1 2 3
Primeiro argumento 1 Segundo argumento 2
Nome deste script ex1.sh
O process ID deste script 1579
Exit status do comando anterior 0
"

Os primeiros prints foram, respectivamente, a variável PATH da shell que executou o comando, o nome de usuário que executou o comando e a pasta home do usuário. Em seguida, ele imprimiu o valor das variáveis "ola" e "olaJoao" junto com outros textos, mas como elas não existiam nada foi impresso no lugar delas, o que levou às mensagens " Joao", linha vazia e " Joao".
Após isso, o script criou uma variável $msg com algum texto, e em seguida ele imprimiu a string "msg".
Daí ele imprimiu a mensagem "Escreva uma mensagem", leu a entrada do terminal na variável "var", e imprimiu na linha seguinte a string "Recebeu " seguida do valor da variável $var, que foi passada pela entrada padrão. 
Em seguida, a saída do comando "date" foi colocada na variável "data", e o valor dessa variável foi impresso, seguida pelo preenchimento da variável "info" com a pasta home do usuário, o texto " estamos em " e o caminho do diretório no qual o comando foi executado. Mais uma vez, o valor da varíavel recém-preenchida "info" foi impresso.
Nessa parte, o script seta o valor da variável x para 1, e na linha seguinte usa o comando let para atualizar o valor de x para 1+2+3 = 6, e o imprime.
Então ele usa a sintaxe de parêntesis duplos para setar x = 6 + 3 e o imprime novamente. Por último, ele usa a sintaxe -- para reduzir o valor de x de 9 para 8 e o imprime.
Nessa parte final, o script simplesmente usa mensagens em conjunto com o echo para imprimir alguns dos valores passados como parâmetros para o comando e alguns dos valores especiais que a shell disponibiliza com o símbolo monetário ($). Os parâmetros que passamos no início pela linha de comando aparecem nessa parte.

2)
O comando banner está sendo executado com a saída do comando "date | cut -c13-20" como parâmetro de linha de comando.
A primeira parte do comando "date | cut -c13-20" imprime a data e hora atual, e a segunda parte pega apenas o último caractere da hora até o último caractere dos segundos.
Com isso, o comando "banner" imprime esses 7 caracteres de forma bem grande no terminal usando o caractere "#" como pixel para mostrar a mensagem.

3)
#!/bin.bash
echo `date +%F`
find / -user $USER 2>/dev/null

4)
#!/bin/bash
file -E $1

5)
#!/bin/bash
if stat $1 >/dev/null 2>/dev/null; then
    tamanho_arquivo_bytes=$(stat -c %s $1)
    if [ $tamanho_arquivo_bytes -gt 100 ]; then
        echo 'O tamanho do arquivo é maior que 100 bytes.'
    else
        echo 'O tamanho do arquivo é menor ou igual a 100 bytes.'
    fi
else
    echo 'O arquivo não existe ou você não tem permissão para vê-lo.'
fi

6)
#!/bin/bash
echo "Há $(ps --no-headers aux | wc -l) processos executando no sistema."

7)
#!/bin/bash
echo "Digite o número completo do ano que você deseja visualizar: "; read year
echo "Digite o número do mês que você deseja visualizar: "; read month
cal $month $year

8)
#!/bin/bash
find $1 -maxdepth 1 -iname '*.mpeg' -exec bash -c 'mv ${0} "${0%.mpeg}.mp3"' {} \;

9)
#!/bin/bash
echo 'Qual o diretório desejado? '; read diretorio
find $diretorio -maxdepth 1 -iname '*.mpeg' -exec bash -c 'mv ${0} "${0%.mpeg}.mp3"' {} \;

10)
#!/bin/bash
echo 'Qual o diretório desejado? '; read diretorio
echo 'Qual a extensão que deseja buscar? '; read extensao_1
echo 'Qual a nova extensão? '; read extensao_2
find $diretorio -maxdepth 1 -iname "*.$extensao_1" -exec bash -c "mv \${0} \"\${0%.$extensao_1}.$extensao_2\"" {} \;

11)
#!/bin/bash
pasta=$1
ls -A1 | awk '{print NR": " $0;}'

12)
#!/bin/bash
arquivo=$*
echo "Número de linhas: $(cat $arquivo | wc -l)"
echo "Número de palavras: $(cat $arquivo | wc -w)"

13)
#!/bin/bash
for i in $(seq 1 $1); do
    echo $(($1-$i+1))
    sleep 1
done

14)
#!/bin/bash
i=1
while [ "$#" -gt 0 ] ; do
    printf "%d: %s\n" "$i" "$1"
    shift
    i=$(($i+1))
done

15)
#!/bin/bash
cat /etc/passwd | cut -d: -f1 | sort

16)
#!/bin/bash
cat /etc/passwd | cut -d: -f7 | sort | uniq 

17)
#!/bin/bash
diretorio_a_compactar=$1
diretorio_destino=$2

if [ ! -d $diretorio_a_compactar ]; then
    echo 'O diretório a compactar informado não existe'
    exit 1
fi

if [ ! -d $diretorio_destino ]; then
    echo 'O diretório destino não existe'
    exit 1
fi

cd $diretorio_a_compactar

tar -czf $diretorio_destino/BKP-`date +%Y-%m-%d`.tar.gz .

18)
#!/bin/bash
for i in $(seq 1 5); do
    mkdir -p dir$i
    for j in $(seq 1 5); do
        touch dir$i/file$j
    done
done

19)
#!/bin/bash
printf "%s %s\n" "$(date +"%d/%m/%Y %H:%M")" "$*">> /ideias.txt

20)
#!/bin/bash
find / -user $USER -type d -exec du -s {} \; 2>/dev/null | sort -n

21)
#!/bin/bash
find / -type f -user $USER -exec grep -l bash {} \; 2>/dev/null

22)
#!/bin/bash
find / -type f -user "www-data" 2>/dev/null > arq.txt
find / -type d -user "www-data" 2>/dev/null > dir.txt
cat arq.txt dir.txt > lista.txt

23)
#!/bin/sh
# Precisa do przombies modificado pra salvar o pid no valor da variavel PIDFILE desse arquivo após o fork.
# O caminho desse przombies deve estar na variavel DAEMON.
# Finalmente, esse script deve ser copiado para /etc/init.d/ex23 para ser usado.

PIDFILE=/var/run/ex23.pid
DAEMON=/mnt/c/Users/danid/Desktop/so2-20231/trab3/przombies
NAME=ex23

. /lib/lsb/init-functions

case "$1" in
start)  log_daemon_msg "Starting $NAME"
        start_daemon -p $PIDFILE $DAEMON 60 &
        log_end_msg $?
        ;;
stop)   log_daemon_msg "Stopping $NAME"
        killproc -p $PIDFILE $DAEMON
        RETVAL=$?
        [ $RETVAL -eq 0 ] && [ -e "$PIDFILE" ] && rm -f $PIDFILE
        log_end_msg $RETVAL
        ;;
restart|reload|force-reload) log_daemon_msg "Restarting $NAME" 
        $0 stop
        $0 start
        ;;
status)
        status_of_proc -p $PIDFILE $DAEMON "$NAME" && exit 0 || exit $?
        ;;
*)      log_action_msg "Usage: /etc/init.d/ex23 {start|stop|status|restart|reload|force-reload}"
        exit 2
        ;;
esac
exit 0

24)
#!/bin/bash
# sudo service rsyslog start
# logger "teste"
TEMPFILE=$(mktemp)
tail -n10 /var/log/syslog > "$TEMPFILE"
cat "$TEMPFILE" > /var/log/syslog
rm -f "$TEMPFILE"

25)
#!/bin/bash
awk -F: '$3>100{print $1" ("$3")"};' /etc/passwd
